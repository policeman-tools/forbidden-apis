<?xml version="1.0" encoding="UTF-8"?>
<!--
 * (C) Copyright 2013 Uwe Schindler (Generics Policeman) and others.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
-->
<project name="Policeman's Forbidden API Checker" default="dist"
  xmlns:artifact="antlib:org.apache.maven.artifact.ant"
  xmlns:ivy="antlib:org.apache.ivy.ant"
  xmlns:au="antlib:org.apache.ant.antunit"
>
  <fail message="Minimum supported ANT version is 1.8.0. Yours: ${ant.version}">
    <condition>
      <not><antversion atleast="1.8.0" /></not>
    </condition>
  </fail>

  <property file="${user.home}/build.properties" />
  <property file="build.properties" />

  <property name="jdk.version" value="1.5"/>
  <property name="maven.version" value="2.2.1"/>
  <property name="maven-plugin-plugin.version" value="3.2"/>
  
  <property name="compile.debug" value="true"/>
  <property name="compile.deprecation" value="true"/>

  <property name="ivy.logging" value="download-only"/>

  <property name="signatures.dir" location="src/main/resources/de/thetaphi/forbiddenapis/signatures"/>

  <!-- define Maven coordinates -->
  <property name="groupId" value="de.thetaphi" />
  <property name="artifactId" value="forbiddenapis" />
  <property name="version" value="1.0-SNAPSHOT"/>

  <!-- define artifacts' name, which follows the convention of Maven -->
  <property name="jar-file" location="dist/${artifactId}-${version}.jar" />
  <property name="sources-jar-file" location="dist/${artifactId}-${version}-sources.jar" />

  <!-- defined maven snapshots and staging repository id and url -->
  <property name="maven-snapshots-repository-id" value="sonatype-nexus-snapshots" />
  <property name="maven-snapshots-repository-url" value="https://oss.sonatype.org/content/repositories/snapshots/" />
  <property name="maven-staging-repository-id" value="sonatype-nexus-staging" />
  <property name="maven-staging-repository-url" value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />

  <condition property="tests.supported">
    <or>
      <equals arg1="${ant.java.version}" arg2="1.5"/>
      <equals arg1="${ant.java.version}" arg2="1.6"/>
      <equals arg1="${ant.java.version}" arg2="1.7"/>
      <!-- JDK 8 is currently not supported because ASM cannot load modified class file format -->
    </or>
  </condition>

  <condition property="isSnapshot">
    <contains string="${version}" substring="-SNAPSHOT"/>
  </condition>

  <target name="-init">
    <ivy:cachepath pathid="path.build" conf="build" log="${ivy.logging}"/>
    <ivy:cachepath pathid="path.test" conf="test" log="${ivy.logging}"/>
    <path id="path.run">
      <path refid="path.build"/>
      <pathelement path="build/main"/>
    </path>
    <path id="path.tools-run">
      <path refid="path.build"/>
      <pathelement path="build/tools"/>
    </path>
  </target>

  <target name="-install-tasks" unless="installed.tasks">
    <ivy:cachepath pathid="path.tasks" conf="buildtools" log="${ivy.logging}"/>
    <taskdef name="jarjar" classname="com.tonicsystems.jarjar.JarJarTask" classpathref="path.tasks"/>
    <taskdef uri="antlib:org.apache.maven.artifact.ant" classpathref="path.tasks"/>
    <property name="installed.tasks" value="true"/>
  </target>

  <target name="-uptodate"> 
    <uptodate property="maven-descriptor.uptodate" targetfile="build/main/META-INF/maven/plugin.xml">
      <srcfiles dir="src/main"/>
    </uptodate>
  </target>

  <macrodef name="compile">
    <attribute name="module"/>
    <attribute name="classpathref"/>
    <sequential>
      <mkdir dir="build/@{module}"/>
      <copy todir="build/@{module}">
        <fileset dir="src/@{module}/resources" erroronmissingdir="false" />
      </copy>
      <javac includeantruntime="false" srcdir="src/@{module}/java" destdir="build/@{module}"
        source="${jdk.version}" target="${jdk.version}"
        debug="${compile.debug}" deprecation="${compile.deprecation}">
         <classpath refid="@{classpathref}"/>
         <compilerarg value="-Xlint"/>
      </javac>
    </sequential>
  </macrodef>

  <target name="compile" depends="-init" description="Compile">
    <compile module="main" classpathref="path.build"/>
  </target>

  <target name="compile-tools" depends="-init" description="Compile tools">
    <compile module="tools" classpathref="path.build"/>
  </target>

  <target name="clean" description="Clean">
    <delete dir="build"/>
    <delete dir="dist"/>
  </target>

  <target name="-maven-setup">
    <mkdir dir="build/maven"/>
    <copy todir="build/maven" encoding="UTF-8" outputencoding="UTF-8">
      <fileset dir="src/main/maven" includes="*.template"/>
      <filterset>
        <filter token="NAME" value="${ant.project.name}"/>
        <filter token="VERSION" value="${version}"/>
        <filter token="GROUPID" value="${groupId}"/>
        <filter token="ARTIFACTID" value="${artifactId}"/>
      </filterset>
      <globmapper from="*.template" to="*"/>
    </copy>
  </target>
  
  <target name="maven-descriptor" depends="compile,-maven-setup,-install-tasks,-uptodate" unless="maven-descriptor.uptodate" description="Creates the Maven Plugin Descriptor">
    <!-- with fork=false this somehow takes endless to download the internet, so let's fork - and slow down in an other way (startup) -->
    <artifact:mvn pom="build/maven/pom.xml" mavenVersion="${maven.version}" failonerror="true" fork="true">
      <arg value="org.apache.maven.plugins:maven-plugin-plugin:${maven-plugin-plugin.version}:descriptor"/>
      <sysproperty key="injected.src.dir" file="src/main/java"/>
      <sysproperty key="injected.target.dir" file="build/main"/>
      <syspropertyset>
        <propertyref regex=".*\.version"/>
        <mapper type="glob" from="*" to="injected.*"/>
      </syspropertyset>
    </artifact:mvn>
  </target>

  <target name="jar" depends="compile,-install-tasks,maven-descriptor" description="Create the binary JAR">
    <ivy:cachefileset setid="fileset.bundle" conf="bundle" log="${ivy.logging}"/>
    <mkdir dir="dist"/>
    <jarjar destfile="${jar-file}">
      <zipfileset dir="build/main"/>
      <restrict>
        <name name="**/*.class" handledirsep="true"/>
        <archives>
          <zips><fileset refid="fileset.bundle"/></zips>
        </archives>
      </restrict>
      <keep pattern="de.thetaphi.forbiddenapis.AntTask"/>
      <keep pattern="de.thetaphi.forbiddenapis.MavenMojo"/>
      <rule pattern="org.objectweb.asm.**" result="de.thetaphi.forbiddenapis.asm.@1"/>
      <rule pattern="org.codehaus.plexus.**" result="de.thetaphi.forbiddenapis.plexus.@1"/>
      <manifest>
        <attribute name="Implementation-Version" value="${version}"/>
      </manifest>
      <metainf dir="." includes="LICENSE.txt,NOTICE.txt,bundled-licenses/**"/>
    </jarjar>
  </target>

  <target name="jar-src" description="Create source distribution">
    <mkdir dir="dist"/>
    <zip destfile="${sources-jar-file}" encoding="utf-8">
      <zipfileset dir="." includes="*.xml,*.txt,src/**,bundled-licenses/**" prefix="${artifactId}-${version}"/>
    </zip>
  </target>

  <target name="install-maven-artifacts" depends="-install-tasks,jar,jar-src" description="Installs the Maven artifacts in ~/.m2">
    <artifact:install file="${jar-file}">
      <pom id="maven.pom" file="build/maven/pom.xml"/>
      <attach file="${sources-jar-file}" classifier="sources"/>
    </artifact:install>
  </target>

  <target name="dist" depends="install-maven-artifacts" description="Create the distribution"/>

  <target name="stage" depends="-stage.snapshots,-stage.release" description="Create the distribution"/>
  
  <target name="-stage.snapshots" depends="dist" if="isSnapshot">
    <artifact:deploy file="${jar-file}">
      <pom refid="maven.pom"/>
      <attach file="${sources-jar-file}" classifier="sources"/>
    </artifact:deploy>
  </target>

  <target name="-stage.release" depends="dist" unless="isSnapshot">
    <fail message="Not yet implemented"/>
  </target>

  <target name="test" depends="-check-myself,-antunit" description="Run tests"/>

  <target name="-install-forbiddenapi-task" depends="compile" unless="installed.forbiddenapi-task">
    <taskdef name="forbiddenapis" classname="de.thetaphi.forbiddenapis.AntTask" classpathref="path.run"/>
    <property name="installed.forbiddenapi-task" value="true"/>
  </target>
  
  <target name="-check-myself" depends="compile,compile-tools,-install-forbiddenapi-task">
    <forbiddenapis internalRuntimeForbidden="true" failOnUnsupportedJava="false">
      <classpath>
        <path refid="path.run"/>
        <path refid="path.tools-run"/>
      </classpath>
      <fileset dir="build/main"/>
      <fileset dir="build/tools"/>
      <bundledsignatures name="jdk-unsafe-${jdk.version}"/>
      <bundledsignatures name="jdk-deprecated-${jdk.version}"/>
    </forbiddenapis>
  </target>

  <target name="-install-antunit" unless="installed.antunit">
    <taskdef uri="antlib:org.apache.ant.antunit" classpathref="path.test"/>
    <taskdef uri="antlib:net.sf.antcontrib" classpathref="path.test"/>
    <property name="installed.antunit" value="true"/>
  </target>
  
  <target name="-antunit-fake-pom">
    <mkdir dir="build/test"/>
    <pathconvert property="path.build.xslstr" pathsep="|">
      <path refid="path.build"/>
    </pathconvert>
    <!--
      The XSL input file is ignored completely, but XSL expects one to be given,
      so we pass ourself (${ant.file}) here. The list of dependencies is separated by
      '|' and inserted into the fake POM file by XSL.
    --> 
    <xslt in="${ant.file}" out="build/test/fake-pom.xml" style="src/test/antunit/pom-generator.xsl" force="true">
      <outputproperty name="indent" value="yes"/>
      <param name="jarfiles" expression="${path.build.xslstr}"/>
    </xslt>
    <property name="antunit.fake-pom" location="build/test/fake-pom.xml"/>
  </target>

  <target name="-antunit" depends="install-maven-artifacts,-install-forbiddenapi-task,-install-antunit,-antunit-fake-pom" if="tests.supported">
    <mkdir dir="build/test-results"/>
    <property name="antunit.main.classes" location="build/main"/>
    <property name="antunit.tools.classes" location="build/tools"/>
    <property name="antunit.maven3.version" value="3.0.4"/>
    <au:antunit>
      <fileset dir="src/test/antunit" includes="Test*.xml"/>
      <au:plainlistener/>
      <au:xmllistener toDir="build/test-results" logLevel="info"/>
      <propertyset>
        <propertyref prefix="antunit."/>
        <propertyref name="jar-file"/>
        <propertyref regex=".*version"/>
        <propertyref name="groupId"/>
        <propertyref name="artifactId"/>
        <propertyref name="ivy.logging"/>
      </propertyset>
      <referenceset>
        <reference regex="path\..*"/>
      </referenceset>
    </au:antunit>
  </target>
  
  <target name="generate-deprecated" depends="compile-tools" description="Generates deprecated API signature lists for current JDK">
    <mkdir dir="${signatures.dir}"/>
    <echo message="Building deprecated signatures for JDK ${ant.java.version}:"/>
    <java fork="false" classpathref="path.tools-run" classname="de.thetaphi.forbiddenapis.DeprecatedGen">
      <arg value="${ant.java.version}"/>
      <arg file="${java.home}/lib/rt.jar"/>
      <arg file="${signatures.dir}/jdk-deprecated-${ant.java.version}.txt"/>
    </java>
  </target>

  <target name="jenkins" depends="clean,dist,test,-stage.snapshots" description="Runs Jenkins Nightly"/>
</project>